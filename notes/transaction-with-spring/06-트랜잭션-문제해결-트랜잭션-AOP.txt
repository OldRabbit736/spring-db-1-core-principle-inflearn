==== 트랜잭션 AOP 이해 ====
- 트랜잭션 처리 기술에 대한 의존성을 없애기 위해 트랜잭션 추상화를 도입하였고, 추가로 반복적인 트랜잭션 로직을 해결하기 위해 트랜잭션 템플릿도 도입하였다.
- 하지만 아직 서비스 계층에 순수한 비즈니스 로직만 남긴다는 목표는 달성하지 못했다.
- 이럴 때 스프링 AOP를 통해 프록시를 도입하면 문제를 깔끔하게 해결할 수 있다.

* 참고
스프링 AOP와 프록시에 대한 자세한 내용은 "스프링 핵심 원리 - 고급편" 참조하자.

* 프록시
- 프록시 도입 전: 비즈니스 로직에서 트랜잭션을 직접 시작한다. 즉, 비즈니스 로직과 트랜잭션 처리 로직이 공존한다.
- 프록시 도입 후: 트랜잭션 프록시가 트랜잭션 처리 로직을 모두 가져간다. 트랜잭션 프록시가 트랜잭션을 시작 후 실제 서비스를 대신 호출한다.
    - 클라이언트가 트랜잭션 프록시를 호출한다.
    - 트랜잭션 프록시가 트랜잭션 시작한다.
    - 트랜잭션 프록시가 서비스의 비즈니스 로직을 호출한다.
    - 트랜잭션 프록시가 트랜잭션을 종료한다.
    - 즉 트랜잭션 템플릿의 역할을 트랜잭션 프록시 객체가 대신 해 주는 것이다.
    - 프록시를 사용하면 트랜잭션을 처리하는 객체와 비즈니스 로직을 처리하는 서비스 객체를 명확하게 분리할 수 있다.
    - 프록시는 스프링이 자동으로 생성해준다.
    - 프록시 클래스가 서비스 클래스를 상속받는다.

* 스프링이 제공하는 트랜잭션 AOP
- 스프링이 제공하는 AOP 기능을 사용하면 프록시를 매우 편리하게 적용할 수 있다.
  "스프링 핵심 원리 - 고급편"에서 소개된 @Aspect, @Advice, @Pointcut 등을 이용해 트랜잭션 처리용 AOP를 직접 작성하는 것도 가능하다.
- 트랜잭션은 매우 중요한 기능이고 전세계 누구나 다 사용하는 기능이므로 스프링에서 트랜잭션 AOP를 처리하기 위한 모든 기능을 제공한다.
  스프링 부트를 사용하면 트랜잭션 AOP를 처리하기 위해 필요한 스프링 빈들도 자동으로 등록된다.
- 개발자는 트랜잭션이 처리가 필요한 곳에 @Transactional 애노테이션만 붙여주면 된다.
  스프링의 트랜잭션 AOP는 이 애노테이션을 인식해서 트랜잭션 프록시를 적용해준다.
- @Transactional - org.springframework.transaction.annotation.Transactional

* 참고
스프링 AOP를 적용하려면 어드바이저, 포인트컷, 어드바이스가 필요하다. 스프링은 트랜잭션 AOP 처리를 위해 다음 클래스를 제공한다.
스프링 부트를 사용하면 해당 빈들은 스프링 컨테이너에 자동으로 등록된다.
- 어드바이저: BeanFactoryTransactionAttributeSourceAdvisor
- 포인트컷: TransactionAttributeSourcePointcut
- 어드바이스: TransactionInterceptor

* 적용
MemberServiceV3_3
- 순수한 비즈니스 로직만 남고, 트랜잭션 관련 코드는 모두 삭제되었다.
- 스프링이 제공하는 트랜잭션 AOP를 적용하기 위해 @Transactional 애노테이션이 추가되었다.
- @Transactional 애노테이션은 메서드에 붙여도 되고 클래스에 붙여도 된다.
- 클래스에 붙이면 외부에서 호출 가능한 public 메서드가 AOP 적용 대상이 된다.
@Transactional --> 아래의 기능을 메서드에 자동 적용
- transaction 시작,
- 메서드(비즈니스 로직) 실행
- Runtime Exception 발생 시 rollback (default) (설정 변경 가능)
- 그 외의 경우(로직 성공, Checked Exception 발생) commit
--> 프록시 객체로 기능 제공 (프록시 클래스가 서비스 클래스를 상속 받고 필요할 때 서비스 메서드 호출, 메서드 호출 주위에 트랜잭션 관련 코드 배치)

* @Transactional 적용하기 위한 조건
- MemberServiceV3_3Test 참조
- 스프링 AOP를 적용하려면 스프링 컨테이너가 필요하다.
- @SpringBootTest 애노테이션이 있으면 테스트 시 스프링 부트를 통해 스프링 컨테이너를 생성한다.
  그리고 테스트에서 @Autowired 등을 통해 스프링 컨테이너가 관리하는 빈들을 주입받아 사용할 수 있다.
- @TestConfiguration
    - 테스트 안에서 내부 설정 클래스를 만들어서 이 애노테이션을 붙이면
      스프링 부트가 자동으로 만들어주는 빈들에 추가로 해당 빈들도 등록이 된다.
- TestConfig
    - DataSource: 스프링에서 기본으로 사용할 데이터소스를 스프링 빈으로 등록한다. 트랜잭션 매니저에서도 사용된다.
    - DataSourceTransactionManager: 트랜잭션 매니저를 스프링 빈으로 등록한다.
        - 스프링이 제공하는 트랜잭션 AOP는 스프링 빈에 등록된 트랜잭션 매니저를 찾아서 사용하기 때문에 트랜잭션 매니저를 스프링 빈으로 등록해두어야 한다.

* AOP 프록시 적용 확인
- MemberServiceV3_3Test::AopCheck() 참조
