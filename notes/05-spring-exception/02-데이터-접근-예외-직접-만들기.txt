==== 데이터 접근 예외 직접 만들기 ====
- JDBC의 SQLException 내에는 데이터베이스가 제공하는 errorCode라는 것이 들어있다. (데이터베이스는 오류가 발생하면 에러코드를 JDBC 드라이버에게 응답한다.)
- 예를들어 H2 데이터베이스는 "키 중복 오류" 코드를 23505로 반환한다.
  e.getErrorCode() == 23505
- SQLException errorCode를 확용하면 데이터베이스에 어떤 문제가 발생했는지 확인할 수 있다.
    - H2 데이터베이스 예
        - 23505: 키 중복 오류
        - 42000: SQL 문법 오류
- 같은 오류라도 데이터베이스마다 오류 코드가 다르다. 따라서 오류코드의 의미는 각 데이터베이스 매뉴얼에서 확인해야 한다.
    - H2: https://www.h2database.com/javadoc/org/h2/api/ErrorCode.html
    - Postgresql: https://www.postgresql.org/docs/current/errcodes-appendix.html

* 서비스 계층과 에러 코드
서비스 계층에서는 오류 코드를 확인해야 할까?
비즈니스 로직에 따라 확인해야 할 경우도 있다.
예를들어, 회원가입 시 DB에 이미 같은 ID가 있으면 ID 뒤에 숫자를 붙어셔 새로운 ID를 만들어야 한다고 가정해보자.
- ID "hello"로 가입시도 했는데 이미 같은 아이디가 있다면 "hello12345"등과 같은 아이디로 가입 시키는 것이다.
이런 경우 서비스 계층에서는 예외 복구를 위해 오류를 확인할 수 있어야 한다.
그래야 새로운 ID를 만들어서 다시 저장을 시도할 수 있기 때문이다. 이러한 과정이 바로 예외를 확인해서 복구하는 과정이다.

리포지토리는 SQLException을 서비스 계층에 던지고 서비스 계층은 이 예외의 오류 코드를 확인해서
중복오류인 경우 새로운 ID를 만들어서 다시 저장하면 된다.

그런데 SQLException은 JDBC 기술이기 때문에 서비스가 JDBC에 의존하게 되어 서비스의 순수성을 헤치게 된다.
이 문제를 해결하려면 리포지토리에서 예외를 변환해서 던지면 된다.
SQLException -> MyDuplicateKeyException
* ExTranslatorV1Test.java 코드 참조

* 정리
- SQLException -> MyDuplicateKeyException 변환을 통해 특정 기술에 의존하지 않게 되었다.

* 남은 문제
- SQL ErrorCode는 각 데이터베이스마다 다르다. 결과적으로 데이터베이스가 변경될 때마다 ErrorCode도 모두 변경해야 한다.
    예) 키 중복 오류
        - H2: 23505
        - MySQL: 1062
- 데이터베이스가 전달하는 오류는 키 중복뿐만 아니라 락이 걸린 경우, SQL 문법 오류 등 수십 수백가지이다.
  이 모든 상황에 맞는 예외를 지금처럼 모두 만들어야 할까? 더군다나 데이터베이스마다 오류 코드는 모두 다르다.
