==== 스프링 예외 추상화 이해 ====
스프링은 앞서 설명한 문제들을 해결하기 위해 데이터 접근과 관련된 예외를 추상화해서 제공한다.

* 스프링 데이터 접근 예외 계층
RuntimeException <- DataAccessException <- NonTransientDataAccessException
                                        <- TransientDataAccessException

    NonTransientDataAccessException <- BadSqlGrammarException
                                    <- DataIntegrityViolationException <- DuplicateKeyException

    TransientDataAccessException <- QueryTimeoutException
                                 <- OptimisticLockingFailureException
                                 <- PessimisticLockingFailureException

- 스프링은 데이터 접근 계층에 대한 수십 가지 예외를 정리해서 일관된 예외 계층을 제공한다.
- 각각의 예외는 특정 기술에 종속적이지 않게 설계되어 있다. 따라서 서비스 계층에서도 스프링이 제공하는 예외를 사용하면 된다.
  예를들어 JDBC 기술을 사용하든 JPA 기술을 사용하든 스프링이 제공하는 예외를 사용하면 된다.
- JDBC나 JPA를 사용할 때 발생하는 예외를 스프링이 제공하는 예외로 변환해주는 기능도 스프링이 제공한다.
- 참고로 그림을 단순화 하기 위해 일부 계층이 생략되었다.

* DataAccessException
- 스프링이 제공하는 데이터 접근 최상단 예외이다.
- 런타임을 상속받았기 때문에 스프링이 제공하는 데이터 접근 계층의 모든 예외는 런타임 예외이다.
- 2가지 카테고리로 나뉜다.
    - Transient
        - 일시적인 예외이다.
        - 동일한 SQL을 다시 시도했을 때 성공할 가능성이 있다. (데이터베이스 상태가 좋아지거나 락이 풀렸을 때)
    - NonTransient
        - 일시적이지 않은 예외이다.
        - 같은 SQL을 다시 시도하면 실패한다.

* 참고
스프링 매뉴얼은 모든 예외를 보여주진 않기 때문에 DataAccessException (abstract class) 을 열어보고 구현한 하위 클래스들을 확인해보는 것이 좋다.

==== 스프링이 제공하는 예외 변환기 ====
스프링은 데이터베이스에서 발생하는 오류 코드를 스프링이 정의한 예외로 자동으로 변환해주는 변환기를 제공한다.

* SpringExceptionTranslatorTest.java, exceptionTranslator 메서드 참조
- translate() 메서드 첫 번째 파라미터는 읽을 수 있는 설명이고 두번째는 실행한 sql, 마지막은 발생한 SQLException이다.
- translate()는 SQLException을 적절한 스프링 데이터 접근 계층의 예외로 변환해준다.
- 예제에서는 BadSqlGrammarException이 반환된다.
    - 반환 타입은 최상위 타입인 DataAccessException 이지만 실제로는 BadSqlGrammarException 이 반환된다.

스프링은 어떻게 각각의 DB가 제공하는 에러를 추상화 예외로 변환할 수 있을까?
* org.springframework.jdbc.support.sql-error-codes.xml
- 스프링 SQL 예외 변환기는 이 파일을 이용해 어떤 에러코드가 어떤 스프링 데이터 예외로 전환되어야 할지 찾아낸다.

* 정리
- 스프링은 데이터 접근 계층에 대한 일관된 예외 추상화를 제공한다.
- 스프링은 예외 변환기를 통해서 SQLException을 ErrorCode에 맞는 적절한 스프링 데이터 접근 예외로 변환해준다.
- 만약 서비스, 컨트롤러 계층에서 예외 처리가 필요하다면(복구 등) 특정 기술에 종속적인 SQLException 같은 예외를 직접 사용하는 것이 아니라,
  스프링이 제공하는 데이터 접근 예외를 사용하면 된다. (리포지터리에서 변경)
- 스프링 예외 추상화 덕분에 특정 기수에 종속적이지 않게 되었다. JDBC에서 JPA 같은 기술로 변경되어도 예외로 인한 변경을 최소화할 수 있다.
- 물론 스프링이 제공하는 예외를 사용하기 때문에 스프링에 대한 기술 종속성이 생긴다.
    - 이 종속성까지 완전히 제거하려면 예외를 모두 직접 정의하고 예외 변환도 직접하면 되지만 실용적인 방법은 아니다.

* 코드 적용
- MemberRepositoryV4_2.java, MemberServiceV4Test.java(리포지토리만 V4.2로 갈아끼움)

스프링이 예외를 추상화해준 덕분에, 서비스 계층은 특정 리포지토리의 구현 기술과 예외에 종속적이지 않게 되었다.
서비스 계층은 구현 기술이 변경되어도 그대로 유지할 수 있게 되었다. 다시 DI를 제대로 활용할 수 있게 된 것이다.
추가로 서비스 계층에서 예외를 잡아서 복구해야 하는 경우, 스프링이 제공하는 데이터 접근 예외를 잡아서 복구하면 된다.
