==== 언체크 예외 기본 이해 ====
- RuntimeException과 그 하위 예외는 언체크 예외로 분류된다.
- 컴파일러가 체크하지 않는다는 것이다.
- 체크 예외와 언체크 예외는 기본적으로 동일하다. (모든 예외는 잡거나 던지거나 해야 한다.)
  언체크 예외는 잡지 않은 경우(즉 던질 때)에도 메소드에 throws를 선언하지 않아도 된다. (물론 선언해도 된다.)

* 체크 예외 vs 언체크 예외
- 체크 예외: 예외를 잡아서 처리하지 않으면 항상 throws에 던지는 예외를 선언해야 한다. (잡거나 던지거나를 명시적으로 표시하도록 컴파일러가 강제한다.)
- 언체크 예외: 예외를 잡아서 처리하지 않아도 throws를 생략할 수 있다. (잡거나 던지거나를 명시적으로 표시하지 않아도 컴파일러가 봐준다.)

참조: UncheckedTest.java
- 언체크 예외도 "throws 예외"를 선언해도 된다.
- 언체크 예외는 대게 이런 throws 선언문을 생략한다. 하지만 중요한 예외의 경우 선언해두면
  해당 코드를 호출하는 개발자가 인지하는 데 도움을 준다. (하지만 컴파일이 아닌 IDE를 통해 인지하는 정도)

* 언체크 예외의 장단점
- 언체크 예외는 예외를 잡지 않았을 때 throws 선언문을 생략할 수 있다. 이것의 장 단점은 다음과 같다.
- 장점
    - 신경쓰고 싶지 않은 언체크 예외를 무시할 수 있다.
    - 따라서 신경쓰고 싶지 않은 예외를 의존하지 않아도 된다.
- 단점
    - 언체크 예외는 개발자가 인지하지 못할 가능성이 있다.

* 정리
체크 예외와 언체크 예외으 차이는 예외를 처리할 수 없을 때에 있다.
체크 예외는 throws 선언을 필수로 해 주어야 하고
언체크 예외는 생략할 수 있다. (옵셔널이다.)
