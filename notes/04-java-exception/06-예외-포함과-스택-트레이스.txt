==== 예외 포함과 스택 트레이스 ====
예외를 전환할 때는 꼭 기존 예외를 포함해야 한다. 그렇지 않으면 스택 트레이스를 확인할 때 심각한 문제가 발생한다.

* UnCheckedAppTest.java, void printEx()
- 로그를 출력할 때 마지막 파라미터에 예외를 넣어주면 로그에 스택 트레이스를 출력할 수 있다.
    - log.info("message={}", "message", ex)
    - log.info("ex", ex)
- System.out 에 스택 트페이스를 출력하려면 e.printStackTrace()를 사용하면 된다.
    - 실무에서는 항상 로그를 사용해야 한다.

* 기존 예외 포함, 불포함 - UnCheckedAppTest.java, Repository call 메서드
- 예외 전환 시 기존 예외를 cause 파라미터에 넣어주자.
- 그래야 스텍 트레이스에 기존 예외의 스텍 트레이스를 확인할 수 있다.
- 기존 예외를 "Caused by"에서 확인할 수 있다.
- RuntimeException으로 전환되기 전에 발생하는 예외도 1개가 아닐 수 있다. 다수가 발생할 수 있으며,
  해당 예외가 다수의 "Caused by" 스텍 트레이스를 만들게 되며 맨 아래의 "Caused by"가 root cause가 된다.
- 기존 예외의 스텍 트레이스에 예외가 발생한 근본 원인이 들어 있으므로 이 정보를 포함하지 않으면 예외의 원인을 찾을 수가 없다.
- 만약 실제 DB에서 발생한 예외라고 한다면, DB에서 어떤 문제가 발생해서 예외가 발생했는지 추적할 수 있는 단서가 없어지는 것이다.
--> 현업 서비스에서 이렇게 운영하면 심각한 문제가 발생한다!
