==== 트랜잭션 동기화 ====
스프링이 제공하는 트랜잭션 매니저(PlatformTransactionManager)는 크게 2가지 역할을 한다.
- 트랜잭션 추상화
- 리소스 동기화

* 트랜잭션 추상화
- 앞 부분에서 설명

* 리소스 동기화
하나의 트랜잭션 내에 SQL이 동작하도록 하기 위해, 리포지토리 메서드에 connection을 파라미터로 전달하는 방법을 사용하였었다.
이 방법은 코드가 지저분해지는 것은 물론이고 리포지토리 메서드도 커넥션 있는 버전 없는 버전, 이렇게 2가지 메서드를 관리해 주어야 해서
관리에 부담이 생긴다는 단점이 있다.
스프링은 이것을 "트랜잭션 동기화 매니저"를 통해 해결해 준다.

* 트랜잭션 매니저와 트랜잭션 동기화 매니저(TransactionSynchronizationManager)"
- 트랜잭션 매니저는 "트랜잭션 동기화 매니저"를 사용하여 커넥션을 관리한다.
- 트랜잭션 동기화 매니저는 쓰레드 로컬(ThreadLocal)을 사용하여 커넥션을 동기화 한다.
  (SecurityContext가 ThreadLocal에 저장된다는 점이 떠오른다.)
- 트랜잭션 동기화 매니저는 쓰레드 로컬을 사용하기에 멀티쓰레드 상황에 안전하게 커넥션을 동기화할 수 있다.
  따라서 커넥션이 필요하면 트랜잭션 동기화 매니저를 통해 커넥션을 획득하면 된다.
  더 이상 이전처럼 파라미터로 커넥션을 전달하지 않아도 된다.

* 트랜잭션 동기화 매니저 동작
- 트랜잭션을 시작하려면 커넥션이 필요하다. 트랜잭션 매니저는 데이터소스를 통해 커넥션을 만들고 트랜잭션을 시작한다.
- 트랜잭션 매니저는 트랜잭션이 시작된 커넥션을 트랜잭션 동기화 매니저가 보관하게 한다.
- 리포지토리는 트랜잭션 동기화 매니저에 보관된 커넥션을 꺼내서 사용한다. 따라서 파라미터로 커넥션을 전달하지 않아도 된다.
- 트랜잭션 매니저는 트랜잭션 동기화 매니저에 보관된 커넥션을 통해 트랜잭션을 종료하고 커넥션도 닫는다.

* 참고
쓰레드 로컬을 사용하면 쓰레드마다 별도의 저장소가 부여된다. 따라서 해당 쓰레드만 해당 데이터에 접근할 수 있다.
쓰레드 로컬에 대한 자세한 내용은 "스프링 핵심 원리 - 고급편" 강의에서 확인할 수 있다.
