==== 계층 구조 ====
* 애플리케이션 구조
- 프레젠테이션 계층
    - UI와 관련된 처리
    - 웹 요청, 응답 처리
    - 사용자 요청 검증 처리
    - 주 사용 기술: 서블릿과 HTTP 같은 웹 기술, 스프링 MVC
- 서비스 계층
    - 비즈니스 로직을 담당
    - 주 사용 기술: "가급적 특정 기술에 의존하지 않고 순수 자바 코드로 작성하는 것이 좋음"
- 데이터 접근 계층
    - 실제 데이터베이스에 접근하는 코드
    - 주 사용 기술: JDBC, JPA, File, Redis, Mongo, ...

* 순수한 서비스 계층
- 핵심 비즈니스 로직을 담당하는 서비스 계층이 가장 중요한 곳이다.
  시간이 흘러 UI(웹)와 관련된 부분이 변하고, 데이터 저장 기술을 다른 기술로 변경해도,
  비즈니스 로직은 최대한 변경없이 유지되어야 한다.
- 그러기 위해서는 서비스 계층이 특정 기술에 종속적이지 않게 개발해야 한다.
    - 위와 같이 계층을 나눈 이유 중 상당 부분이 서비스 계층을 최대한 순수하게 유지하기 위함이다.
      기술 종속적인 부분은 프레젠테이션, 데이터 접근 계층이 관리한다.
    - 프레젠테이션 계층은 클라이언트의 서버 접근을 관리한다. (웹, 서블릿, HTTP 등)
      따라서 서비스 계층을 이런 UI 관련된 기술로부터 보호해준다.
      예를들어 HTTP API가 사용되다가 GRPC와 같은 기술로 변경해도 프레젠테이션 계층에만 변화가 생기고
      서비스 계층은 그대로 유지할 수 있다.
    - 데이터 접근 계층은 데이터를 저장하고 관리하는 기술을 담당한다.
      JDBC, JPA와 같은 구체적인 데이터 접근 기술로부터 서비스 계층을 보호해준다.
      서비스 계층은 데이터 접근 인터페이스에 의존하고 데이터 계층은 이 인터페이스를 구현한다.
      데이터 계층은 내부의 기술을 마음대로 변경할 수 있고(JDBC -> JPA 변경 등) 서비스 계층은 이에 영향을 받지 않는다.
- 서비스 계층이 특정 기술에 종속적이지 않게 되면 비즈니스 로직을 유지보수, 테스트하기 쉬워진다.
- 정리하면, 서비스 계층은 가급적 비즈니스 로직만 구현하고 특정 구현 기술에 직접 의존해서는 안된다.
  이렇게 하면 향후 구현 기술 변경될 때 변경의 영향 범위를 최소화할 수 있다.

==== MemberService 문제점 ====
* MemberServiceV1
- 특정 기술에 종속적이지 않고 순수한 비즈니스 로직만 존재한다.
- 코드가 깔끔하고 유지보수하기 쉽다.
- 그래도 한 가지 문제점이 있다.
    - SQLException은 JDBC 기술에 의존한다.
    - 이 Exception은 memberRepository에서 발생하는 예외이기 때문에 memberRepository에서 해결해야 한다.
      (해당 부분은 추후 강좌에서 다뤄질 예정)
    - MemberRepositoryV1이라는 구체 클래스에 직접 의존하고 있다.
    - MemberRepository 인터페이스를 도입하면
      MemberService에 영향을 주지 않으면서 MemberRepository 구현 기술을 손쉽게 변경할 수 있다.

* MemberServiceV2
- 비즈니스 로직과 JDBC를 이용한 트랜잭션 로직이 섞여 있다.
- 트랜잭션은 비즈니스 로직이 있는 서비스 계층에서 시작하는 것이 좋다. (비즈니스 로직을 하나의 트랜잭션으로 묶어야 하는 것이 보통이기 때문이다.)
- 문제는, 트랜잭션을 사용하기 위해 javax.sql.DataSource, java.sql.Connection, java.sql.SQLException 과 같은 JDBC 기술에
  의존해야 한다는 점이다.
- 트랜잭션을 사용하기 위해 JDBC 기술에 의존한다. 결과적으로 비즈니스 로직보다 JDBC를 사용한 트랜잭션 처리 코드가 더 많다.
- 향후 JDBC에서 JPA 같은 기술로 변경하려면 서비스 코드도 변경해야 한다. (JPA는 트랜잭션을 사용하는 코드가 JDBC의 것과 다르다.)
- 핵심 비즈니스 로직과 JDBC 기술이 섞여 있어서 유지보수 하기 어렵다.

==== 문제 정리 ====
지금까지 개발한 애플리케이션의 문제점은 크게 3가지이다.
- 트랜잭션 문제
- 예외 누수 문제
- JDBC 반복 문제

* 트랜잭션 문제
- JDBC 구현 기술이 서비스 계층에 누수되는 문제
    - 서비스 계층은 특정 기술에 종속되지 않아야 한다.
      트랜잭션을 적용하면서 결국 서비스 계층에 JDBC 구현 기술이 흘러 들어가게 되었다.
- 트랜잭션 동기화 문제
    - 같은 트랜잭션을 유지하기 위해 비즈니스 로직에서 커넥션을 파라미터로 리포지토리 메서드에 넘겼다.
    - 리포지토리 메서드는 2가지 버전을 유지해야 해서 관리가 어렵게 되었다. (커넥션 받는 버전, 안 받는 버전)
- 트랜잭션 적용 반복 문제
    - try catch finally 등의 코드가 반복된다.

* 예외 누수
- JDBC 구현 기술 예외가 서비스 계층으로 전파되었다.
- 리포지토리 메소드가 던지는 SQLException이 체크 예외이기 때문에 리포지토리 메소드를 호출한 서비스 계층에서
  해당 예외를 잡거나 다시 던져야 한다.
- SQLException은 JDBC 전용 기술이다. 향후 JPA나 다른 데이터 접근 기술을 사용하면 예외도 변경해야 하고
  결국 서비스 코드도 수정해야 한다.

* JDBC 반복 문제
- try, catch, finally, ... 그 외에 커넥션 열고 Statement 사용하고 결과 매핑하고 리소스 정리하고...

* 스프링과 문제 해결
스프링은 서비스 계층을 순수하게 유지하면서, 지금까지 이야기한 문제들을 해결할 수 있는 다양한 방법을 제공한다.
