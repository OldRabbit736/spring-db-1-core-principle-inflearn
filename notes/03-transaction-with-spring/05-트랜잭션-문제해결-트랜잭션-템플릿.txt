==== 트랜잭션 문제 해결 - 트랜잭션 템플릿 ====
MemberServiceV3_1 을 살펴보면 같은 패턴이 반복되는 것을 볼 수 있다.

TransactionStatus status = transactionManager.getTransaction(new DefaultTransactionDefinition());
try {
    bizLogic(fromId, toId, money);
    transactionManager.commit(status);
} catch (Exception e) {
    transactionManager.rollback(status);
    throw new IllegalStateException(e);
}

- bizLogic을 제외한 나머지 부분은 각각의 서비스 메서드에서 반복되는 부분이다.
- 이럴 때 템플릿 콜백 패턴을 활용하여 코드 반복 문제를 해결할 수 있다.

* 트랜잭션 템플릿
템플릿 콜백 패턴을 적용하려면 템플릿을 제공하는 클래스를 작성해야 하는데
스프링은 TransactionTemplate 이라는 템플릿 클래스를 제공한다.
- execute(): 응답 값이 있을 때 사용한다.
- executeWithoutResult(): 응답 값이 없을 때 사용한다.

* 트랜잭션 템플릿 사용 로직
- MemberServiceV3_2
- 트팬잭션 템플릿 덕분에 트랜잭션을 시작하고 커밋, 롤백하는 코드가 모두 제거되었다.
- 트랜잭션 템플릿의 기본 동작은 다음과 같다.
    - 비즈니스 로직이 정상 수행되면 커밋한다.
    - 언체크 예외가 발생하면 롤백한다. 그 외의 경우 커밋한다. (체크 예외의 경우에는 커밋한다. 이 부분은 뒤에서 설명된다.)
- 코드에서 예외를 처리하기 위해 try-catch 문이 들어갔는데 bizLogic() 메서드를 호출하면 SQLException 체크 예외를 넘겨준다.
  해당 람다에서 체크 예외를 밖으로 던질 수 없기 때문에 언체크 예외로 바꾸어 던지도록 예외를 전환했다.

* 정리
- 트랜잭션 템플릿 덕분에 트랜잭션을 사용할 때 반복되던 코드들을 제거할 수 있었다.
- 하지만 이곳은 서비스 로직인데 비즈니스 로직 뿐만 아니라 트랜잭션을 처리하는 기술 로직이 함께 포함되어 있다.
- 서비스 입장에서 비즈니스 로직은 핵심 기능이고 트랜잭션은 부가 기능이다.
- 두 관심사가 한 곳에 모여 있으므로 코드 유지보수가 어려워진다.
- 서비스 로직에는 가급적 핵심 비즈니스 로직만 있는 것이 좋다. 하지만 트랜잭션 기술을 사용하려면 어쩔 수 없이 트랜잭션 코드가 필요하다.
  어떻게 하면 이 문제를 해결할 수 있을까?
