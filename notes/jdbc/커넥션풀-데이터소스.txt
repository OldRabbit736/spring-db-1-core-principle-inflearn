== 커넥션 풀 이해 ==

* 데이터베이스 커넥션 획득 과정
- 애플리케이션 로직이 DB Manager를 통해 DB Driver가 커넥션을 시도하게 한다.
- DB Driver는 DB와 TCP/IP 커넥션을 맺는다. (3 way handshake 등의 TCP/IP 네트워크 동작 발생)
- DB 드라이버는 TCP/IP 커넥션이 맺어지면 ID, PW를 포함한 정보를 DB에 전달한다.
- DB는 ID, PW를 통해 내부 인증을 완료하고 내부에 DB 세션을 생성한다.
- DB는 커넥션 생성이 완료되었다는 응답을 보낸다.
- DB 드라이버는 커넥션 객체를 생성해서 클라이언트에 반환한다.

데이터베이스 커넥션을 새로 만드는 과정은 복잡하고 시간을 소모한다.
애플리케이션 서버도 물론 TCP/IP 커넥션을 새로 생성해야 하므로 리소스를 매번 사용해야 한다.
진짜 문제는 고객이 애플리케이션을 사용할 때, SQL을 실행하는 시간에 더해 커넥션을 맺는 시간까지 추가로 걸리기 때문에
응답에 걸리는 시간이 늘어난다는 것이다. 사용자 경험에 마이너스가 된다.
--> 이런 문제를 해결하는 아이디어가 바로 "커넥션 풀"이라는 방법이다.
커넥션 풀은 미리 생성해 둔 커넥션을 관리하는 풀이다.

* 커넥션 풀
애플리케이션을 시작하는 시점에, 애플리케이션 서버는 DB 드라이버를 통해 위(데이터 커넥션 획득 과정)의 과정을 통해 커넥션(커넥션 객체)을 미리 확보해 둔다.
얼마나 보관할지는 서비스의 특징과 서버 스펙에 따라 달라지지만 기본값은 보통 10개이다.
커넥션 풀에 들어 있는 커넥션은 TCP/IP로 DB와 연결되어 있는 상태이기 때문에 언제든지 즉시 SQL을 DB에 전달할 수 있다.
DB는 또한 커넥션 풀 내의 각 커넥션에 대응하는 세션이 생성되어 있으므로 빠르게 SQL을 실행할 것이다.

* 커넥션 풀 사용 1 - 커넥션 획득
- 애플리케이션 로직에서 DB 드라이버를 통해 직접 커넥션 객체를 얻지 않는다.
- 커넥션 풀에 이미 생성되어 있는 커넥션을 객체 참조로 가져다 사용하기만 하면 된다.
- 커넥션 풀에 커넥션 반환이 요청되면, 커넥션 풀은 자신이 가지고 있는 커넥션 중 하나를 반환한다.

* 커넥션 풀 사용 2 - SQL 전달 및 커넥션 반환
- 애플리케이션 로직은 커넥션 풀에서 받은 커넥션을 사용해 SQL을 데이터베이스에 전달하고 그 결과를 받는다.
- 커넥션을 모두 사용하고 나면 커넥션 리소스를 종료하는 대신, 커넥션 풀에 반환한다.

* 정리
- 커넥션 풀에 저장될 적절한 커넥션 풀 숫자는 애플리케이션 서버 스펙, DB 서버 스펙에 따라 다르기 때문에 성능 테스트를 통해서 정해야 한다.
- 커넥션 풀은 서버당 최대 커넥션 수를 제한할 수 있다. 따라서 DB에 무한정 연결이 생성되는 것을 막아주어 DB를 보호하는 효과를 준다.
(만약 요청의 수가 많아 커넥션을 받을 수 없어 대기하는 시간이 생기면 서비스 측면에서 장애라고 볼 수도 있지만, 최소한 DB가 죽는 위험성은 막은 것이기 때문에 더 나은 상황이라고 할 수 있다.)
- 커넥션 풀을 사용함으로써 얻는 이점이 매우 크기 때문에 "실무에서는 항상 기본"으로 사용한다.
- 커넥션 풀은 개념적으로 단순해서 직접 구현할 수도 있지만, 사용도 편리하고 성능도 뛰어난 오픈소스 커넥션 풀이 많기 때문에 오픈소스를 사용하는 것이 좋다.
- 대표적인 커넥션 풀 오픈소스는 "commons-dbcp2", "tomcat-jdbc pool", "HikariCP" 등이 있다.
- 성능과 사용의 편리함 측면에서 최근에는 "HikariCP"가 주로 사용된다.
- 스프링 부트 2.0부터는 기본 커넥션 풀로 "HikariCP"를 제공한다. 성능, 편리함, 안전성 측면에서 이미 검증이 되었기 때문에 고민없이 "HikariCP"를 사용하면 된다.
- 실무에서도 레거시 프로젝트가 아닌 이상 대부분 "HikariCP"를 사용한다.
