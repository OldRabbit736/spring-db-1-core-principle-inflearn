==== 트랜잭션 개념 ====
중간에 하나라도 실패하면 거래 전의 상태로 돌아갈 수 있다.

모든 작업이 성공해서 데이터베이스에 정상적으로 반영하는 것을 커밋이라 하고,
작업 중 하나라도 실패해서 거래 이전으로 되돌리는 것을 롤백이라 한다.

==== 트랜잭션 ACID ====
트랜잭션은 ACID를 보장해야 한다.
- Atomicity(원자성)
    - 트랜잭션 내에서 실행한 작업들은 마치 하나의 작업인 것처럼 모두 성공하거나 모두 실패해야 한다.
- Consistency(일관성)
    - 모든 트랜잭션은 일관성 있는 데이터베이스 상태를 유지해야 한다. 예를들어 데이터베이스에서 정한 무결성 제약 조건을 항상 만족해야 한다.
- Isolation(격리성)
    - 동시에 실행되는 트랜잭션들이 서로에게 영향을 미치지 않도록 격리한다. 예를들어 동시에 같은 데이터를 수정하지 못하도록 해야한다.
    - 격리성은 동시성과 관련된 성능 이슈로 인해 트랜잭션 격리수준(Isolation level)을 선택할 수 있다.
- Durability(지속성)
    - 트랜잭션을 성공적으로 끝내면 그 결과가 항상 기록되어야 한다. 중간에 시스템에 문제가 발생해도 데이터베이스 로그 등을
      사용해서 성공한 트랜잭션 내용을 복구해야 한다.

문제는 격리성인데, 트랜잭션 간에 격리성을 완벽히 보장하려면 트랜잭션을 거의 순서대로 실행해야 한다.
이렇게 하면 동시 처리 성능이 매우 나빠진다.
이런 문제로 인해 ANSI 표준은 트랜잭션의 격리 수준을 4단계로 나누어 정의했다.

* 트랜잭션 격리 수준 - Isolation level (마지막으로 갈수록 격리 수준이 높아지며 속도는 느려진다)
- READ UNCOMMITTED (커밋되지 않은 읽기)
- READ COMMITTED (커밋된 읽기)
- REPEATABLE READ (반복 가능한 읽기)
- SERIALIZABLE (직렬화 가능)

강의에서는 일반적으로 많이 사용하는 READ COMMITTED(커밋된 읽기) 트랜잭션 격리 수준을 기준으로 설명한다.
(보통 READ COMMITTED, REPEATABLE READ 둘 중 하나를 사용한다)
더 자세한 내용은 데이터베이스 매뉴얼이나 JPA 책 16.1 트랜잭션과 락을 참고하자.
또는 여기 https://www.udemy.com/course/database-engines-crash-course/learn/lecture/22515194?start=0#overview
